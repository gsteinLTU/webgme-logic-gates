/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Tue Dec 11 2018 14:44:06 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of DigitalJSCodeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin DigitalJSCodeGenerator.
     * @constructor
     */
    function DigitalJSCodeGenerator() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    DigitalJSCodeGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    DigitalJSCodeGenerator.prototype = Object.create(PluginBase.prototype);
    DigitalJSCodeGenerator.prototype.constructor = DigitalJSCodeGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    DigitalJSCodeGenerator.prototype.main = function (callback) {
        var activeNode = this.activeNode,
            node,
            core = this.core,
            logger = this.logger,
            blobClient = this.blobClient,
            artifact,
            self = this,
            digitalJSDict = {},
            deviceNames = {};


        function getDevices(nodes){
            var devicesDict = {};
            var path;
            i = 0;
            var numInputsOutputs = 0;
            for(path in nodes){
                node = nodes[path];
                var nodeDict = {};

                if(self.isMetaTypeOf(node, self.META.LogicGate)
                    || self.isMetaTypeOf(node, self.META.Input)
                    || self.isMetaTypeOf(node, self.META.Output)){
                    var deviceName = "dev" + i;
                    deviceNames[core.getRelid(node) + "dev"] =  deviceName;
                    i = i  + 1;
                    nodeDict["label"] = core.getRelid(node) + "dev";
                    nodeDict["celltype"] = "$" + core.getAttribute(node, "name");
                    if(self.isMetaTypeOf(node, self.META.Input) || self.isMetaTypeOf(node, self.META.Output)){
                        if(self.isMetaTypeOf(node, self.META.Input)){
                            nodeDict["celltype"] = "$button";
                        }else{
                            nodeDict["celltype"] = "$lamp";
                        }
                        nodeDict["net"] = core.getRelid(node) + "dev";
                        nodeDict["order"] = numInputsOutputs;
                        nodeDict["bits"] = 1;
                        numInputsOutputs = numInputsOutputs + 1;
                    }

                    devicesDict[deviceName] = nodeDict;
                }
            }
            return devicesDict;

        }

        function getConnectors(nodes){
            var connectors = [];
            var path;
            for(path in nodes){
                node = nodes[path];
                var nodeDict = {};
                var toDict = {};
                var fromDict = {};
                var numPorts = 0;
                if(self.isMetaTypeOf(node, self.META.Connection)){
                    var sourceNode = nodes[core.getPointerPath(node, 'src')];
                    var destinationNode = nodes[core.getPointerPath(node, 'dst')];

                    var sourceParent = core.getParent(sourceNode);
                    var destParent = core.getParent(destinationNode);
                    if(self.isMetaTypeOf(sourceNode, self.META.InPort)){
                        fromDict["id"] = deviceNames[core.getRelid(sourceParent) + "dev"];
                        fromDict["port"] = "out" + numPorts;
                        toDict["id"] = deviceNames[core.getRelid(destParent) + "dev"];
                        toDict["port"] = "in" + numPorts;
                        nodeDict["name"] = core.getRelid(destParent) + "dev";
                    }else{
                        toDict["id"] = deviceNames[core.getRelid(sourceParent) + "dev"];
                        toDict["port"] = "out" + numPorts;
                        fromDict["id"] = deviceNames[core.getRelid(destParent) + "dev"];
                        fromDict["port"] = "in" + numPorts;
                        nodeDict["name"] = core.getRelid(sourceParent) + "dev";
                    }
                    numPorts = numPorts + 1;
                    nodeDict["to"] = toDict;
                    nodeDict["from"] = fromDict;
                    connectors.push(nodeDict);
                }
            }

        }

        this.loadNodeMap(activeNode)
            .then(function (nodes) {

                //get all the components
                var devices = getDevices(nodes);
                var connectors = getConnectors(nodes);
                digitalJSDict["devices"] = devices;
                digitalJSDict["connectors"] = connectors;
                digitalJSDict["subcircuits"] = {};
                var jsonString = JSON.stringify(digitalJSDict);

                artifact = self.blobClient.createArtifact('MyArtifact');
                return artifact.addFiles({
                    'digitalJS.txt': jsonString,
                    'circuit.json': jsonString
                });
                self.result.setSuccess(true);
                callback(null, self.result);

            }).then(function (fileMetadataHashes) {
            // We can link to each individual file
            //self.logger.info('Added files to blob-storage', fileMetadataHashes);
            self.result.addArtifact(fileMetadataHashes[0]);
            self.result.addArtifact(fileMetadataHashes[1]);
            // and/or save the full artifact and link to it (will be a zip file).
            return artifact.save();
        }).then(function (artifactHash) {
            self.result.addArtifact(artifactHash);
            //self.logger.info('Added complex artifact to blob-storage', artifactHash);
            self.result.setSuccess(true);
            callback(null, self.result);
        }).catch(function (err) {
            logger.error(err.stack);
            // Result success is false at invocation.
            callback(err, self.result);
        });
    };
    return DigitalJSCodeGenerator;
});
